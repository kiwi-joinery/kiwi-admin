name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  IMAGE_NAME: kiwi-admin
  ORG_NAME: kiwi-joinery

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cargo Test
      run: cargo test -- --nocapture

    - name: Cargo Format Check
      run: cargo fmt -- --check

    - name: Cargo Sort Check
      run: cargo install cargo-sort --debug && cargo-sort --workspace --check
      
  package:
    # Only packages docker image if we are pushing to master or pushing a tag
    # https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      - uses: snok/container-retention-policy@v1
        name: Clean untagged images
        with:
          image-names: ${{ env.IMAGE_NAME }}
          cut-off: 12 hours ago UTC
          untagged-only: true
          account-type: org
          org-name: ${{ env.ORG_NAME }}
          token: ${{ secrets.PACKAGE_PAT }}
